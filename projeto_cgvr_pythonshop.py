# -*- coding: utf-8 -*-
"""PROJETO CGVR - PythonShop

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ecgJNnzVsNu60bhzGhLyZqaaO9nyn6yH

# **PROJETO A3 DE COMPUTAÇÃO GRÁFICA**

##***Grupo:***
- Dominic Nascimento Laubhouet - RA: 822.141.082
- Isabella Cristine Martins - 822.230.944
- Leticia Cristiny Quinteiro Ferreira - 822.147.925
- Maurício Lourenço de Aguiar - 822.121.45
- Marcos Vinícius Pereira Pinto - 823.122.151

---

Programa de Manipulação de Imagem utilizando operações matriciais para alterar a imagem e suas propriedades de acordo com a vontade do usuário

A solução possui funções para:
- Manipular os arquivos de imagem enviados pelo usuário:
  - Upload ;
  - Conversão automática para escala de cinza;
  - Exclusão;
  - Exibição de todas as imagens disponíveis
- Manipulação da imagem e seus propriedades:
  - Criação de um *canvas* vazio que serve como "palco" para as manipulações;
  - Corte da imagem para que ela seja exibida corretamente nesse *canvas*;
  - Redimensionamento de imagem;
  - Rotação da imagem ao redor de seu centro;
  - Translação (movimentação da Imagem);
  - Corte de uma seção da Imagem;
  - Desfocar a imagem de acordo com o príncipio gaussiano;
  - Exibição do histograma;
  - Alteração de Brilho e Constrate;
  - Alteração de Exposição;
  - Ajustes dos níveis de preto e branco;
  - Ajustes das sombras e das luzes;
  - Ajuste de curvas;
  - Suavização;
  - Realce;

Para executar o programa de maneira correta, execute as células na seguinte ordem:
  - `Bibliotecas` -> `Manipulação de Arquivos `-> `Manipulação da Imagem (Operações Obrigatórias)` -> `Manipulação da Imagem (Operações Extras)` -> `Interface`.
"""

#Bibliotecas para realizar as funções
import cv2
import math
import os
import numpy as np
import ipywidgets as widgets
import matplotlib.pyplot as plt

from PIL import Image
from scipy import ndimage
from google.colab import files
from IPython.display import HTML
from IPython.display import display
from IPython.display import clear_output
from google.colab.patches import cv2_imshow

"""## **FUNÇÕES**

### **MANIPULAÇÃO DE ARQUIVOS**
"""

'''
Funções para permitir envio de imagens
'''

def converterEscalaCinza(img):
    img_np = np.array(img)
    escalaDeCinza = np.dot(img_np[..., :3], [0.2989, 0.5870, 0.1140])
    alfa = np.ones(escalaDeCinza.shape) * 255
    escalaDeCinzaAlfa = np.dstack((escalaDeCinza, escalaDeCinza, escalaDeCinza, alfa))
    imagemCinza = Image.fromarray(np.uint8(escalaDeCinzaAlfa))
    return imagemCinza

def uploadImagem():
    imagemEnviada = files.upload()

    for fn in imagemEnviada.keys():
        img = Image.open(fn)
        img = img.convert('RGBA')  # Conversão para .png
        img = converterEscalaCinza(img)

        # Crie um widget de texto para o usuário inserir um novo nome para o arquivo
        nome_arquivo_widget = widgets.Text(
            value='',
            placeholder='Digite o nome do arquivo (sem extensão)',
            description='Nome:',
            layout=widgets.Layout(width='600px', height='auto'),
            disabled=False
        )

        def on_submit_nome(sender):
            nomeUsuario = sender.value + '.png'

            if os.path.exists(nomeUsuario):
                nomeSemExtensao = nomeUsuario.split('.png')[0]
                numArquivoSemTitulo = 1

                while os.path.exists(str(nomeSemExtensao) + str(numArquivoSemTitulo) + '.png'):
                    numArquivoSemTitulo += 1

                nomeUsuario = str(nomeSemExtensao) + str(numArquivoSemTitulo) + '.png'

            img_np = np.array(img)
            cv2.imwrite(nomeUsuario, img_np)
            clear_output(wait=True)
            exibir_botoes()
            print(f'Arquivo {nomeUsuario} salvo com sucesso!')

        os.remove(fn)
        nome_arquivo_widget.on_submit(on_submit_nome)
        display(nome_arquivo_widget)

'''
Função para excluir imagens enviadas
'''

def deletarArquivos():
    # Crie um widget de texto para o usuário inserir o nome do arquivo
    nome_arquivo_widget = widgets.Text(
        value='',
        placeholder='Digite o nome do arquivo',
        description='Arquivo:',
        disabled=False
    )

    # Crie um botão para iniciar a exclusão
    botao_deletar = widgets.Button(
        description='Deletar Arquivo',
        button_style='danger',
        icon='trash'
    )

    # Função chamada quando o botão é clicado
    def on_button_clicked(b):
        nomeArquivo = nome_arquivo_widget.value

        if nomeArquivo.lower() == 'n':
            clear_output(wait=True)
            exibir_botoes()
            print("Operação cancelada pelo usuário.")
            return

        if os.path.exists(nomeArquivo):
            os.remove(nomeArquivo)
            clear_output(wait=True)
            exibir_botoes()
            print(f"Arquivo '{nomeArquivo}' foi excluído.")
        else:
            clear_output(wait=True)
            exibir_botoes()
            print(f"Arquivo '{nomeArquivo}' não encontrado.")

        # Limpa o campo de texto após a operação
        nome_arquivo_widget.value = ''

    # Registre a função de callback no botão
    botao_deletar.on_click(on_button_clicked)

    # Exiba o widget de texto e o botão
    display(nome_arquivo_widget, botao_deletar)

'''
Função para exibir todas as imagens enviadas
'''
def exibirGaleria():

    arquivos = os.listdir()
    imagens = [arquivo for arquivo in arquivos if arquivo.endswith('.png')]

    numColunas = 4
    numLinhas = math.ceil(len(imagens) / numColunas)

    fig = plt.figure(figsize=(15, 7))

    for i, imagem in enumerate(imagens):
        img = Image.open(imagem)

        largura, altura = img.size
        novaLargura = 100
        novaAltura = int(novaLargura * altura / largura)

        img = img.resize((novaLargura, novaAltura))

        ax = fig.add_subplot(numLinhas, numColunas, i+1)
        ax.imshow(img)
        ax.set_title(imagem)
        ax.axis('off')

    plt.subplots_adjust(wspace=0.2, hspace=0.2)
    plt.tight_layout()
    plt.show()

"""### **MANIPULAÇÃO DA IMAGEM - Operações Obrigatórias**"""

'''
Função para criar Canvas do Usuário
'''
def criarCanvas(largura, altura):
  canvasVazio = np.full((altura, largura, 4), 255, dtype=np.uint8)
  return canvasVazio

'''
Função para cortar a imagem para o Canvas do Usuário
'''
def cortarParaCanvasUsuario(imagem, canvasUsuario):

    alturaCanvas, larguraCanvas = canvasUsuario.shape[:2]
    alturaTotal_Imagem, larguraTotal_Imagem = imagem.shape[:2]
    offset_y = (alturaTotal_Imagem - alturaCanvas) // 2
    offset_x = (larguraTotal_Imagem - larguraCanvas) // 2

    imagemCortada = imagem[offset_y:offset_y+alturaCanvas, offset_x:offset_x+larguraCanvas]
    return imagemCortada

'''
Função para Redimensionar a Imagem
'''
def redimensionarImagem(imagemOriginal, proporcao):
  altura, largura, _ = imagemOriginal.shape
  novaAltura = altura * proporcao
  novaAltura = int(novaAltura)
  novaLargura = largura * proporcao
  novaLargura = int(novaLargura)

  imagemRedimensionada = np.zeros((novaAltura, novaLargura, 4))

  fatorDeAumento_x = largura / novaLargura
  fatorDeAumento_y = altura / novaAltura

  for x in range (novaLargura):
    for y in range (novaAltura):
      gx = int(x * fatorDeAumento_x)
      gy = int(y * fatorDeAumento_y)
      gx = min(gx, largura - 2)
      gy = min(gy, altura - 2)

      #Interpolação
      dx = x * fatorDeAumento_x - gx
      dy = y * fatorDeAumento_y - gy

      for c in range(4):  # Para cada canal
            imagemRedimensionada[y][x][c] = (1 - dx) * (1 - dy) * imagemOriginal[gy][gx][c] + dx * (1 - dy) * imagemOriginal[gy][gx + 1][c] + (1 - dx) * dy * imagemOriginal[gy + 1][gx][c] + dx * dy * imagemOriginal[gy + 1][gx + 1][c]


  return imagemRedimensionada.astype(np.uint8)

'''
Funções para Rotacionar a Imagem
'''
def interpolacaoBilinear(imagem, x, y, canal):

    xInferior = int(np.floor(x))
    xSuperior = int(np.ceil(x) - 1)
    yInferior = int(np.floor(y))
    ySuperior = int(np.ceil(y) - 1)

    if xInferior == xSuperior or yInferior == ySuperior:
        return imagem[yInferior, xInferior, canal]

    pesoX = x - xInferior
    pesoY = y - yInferior

    valor = (imagem[yInferior, xInferior, canal] * (1 - pesoX) * (1 - pesoY) +
             imagem[yInferior, xSuperior, canal] * pesoX * (1 - pesoY) +
             imagem[ySuperior, xInferior, canal] * (1 - pesoX) * pesoY +
             imagem[ySuperior, xSuperior, canal] * pesoX * pesoY)

    return valor

def canvasBrancoParaRotacionar(imagem):
    altura, largura = imagem.shape[:2]
    novoTamanho = int(np.ceil(np.sqrt(altura**2 + largura**2)))
    fundoBranco = np.zeros((novoTamanho, novoTamanho, 4))
    offset = (novoTamanho - np.array([altura, largura])) // 2
    fundoBranco[offset[0]:offset[0]+altura, offset[1]:offset[1]+largura] = imagem

    return fundoBranco, offset

def rotacionarImagem(imagem, angulo):
    imagem, offset = canvasBrancoParaRotacionar(imagem)

    altura, largura = imagem.shape[:2]
    centro = np.array([largura, altura]) // 2
    radianos = np.radians(angulo)
    cosAngulo = np.cos(radianos)
    sinAngulo = np.sin(radianos)

    imagemRotacionada = np.zeros_like(imagem)
    for y in range(altura):
        for x in range(largura):

            x_rot, y_rot = np.dot([[cosAngulo, -sinAngulo], [sinAngulo, cosAngulo]],
                                  np.array([x, y]) - centro) + centro


            if 0 <= x_rot < largura and 0 <= y_rot < altura:
                for canal in range(4):
                    imagemRotacionada[y, x, canal] = interpolacaoBilinear(imagem, x_rot, y_rot, canal)

    return imagemRotacionada

'''
Funções para Translação da Imagem
'''
def translacaoImagem(imagem, dx, dy):
    altura, largura, _ = imagem.shape

    # Cria uma "canvas" maior para a imagem transladada
    nova_altura = altura + abs(dy) * 2
    nova_largura = largura + abs(dx) * 2

    # Cria uma imagem branca
    imagemMovida = np.ones((nova_altura, nova_largura, 4), dtype=np.uint8) * 255

    for x in range(largura):
        for y in range(altura):
            # Calcula as novas coordenadas após a translação
            nx, ny = x + dx + abs(dx), y + dy + abs(dy)

            # Verifica se as novas coordenadas estão dentro dos limites da "canvas"
            if 0 <= nx < nova_largura and 0 <= ny < nova_altura:
                imagemMovida[ny][nx] = imagem[y][x]

    return imagemMovida

"""### **MANIPULAÇÃO DA IMAGEM - Operações Extras**"""

'''
Função para Corte da Imagem
'''
def cortarImagem(imagem, inicioX, inicioY, finalX, finalY):

    return imagem[inicioY:finalY, inicioX:finalX]

'''
Função para aplicar Desfoque Gaussiano na Imagem
'''
def desfoqueGaussiano(imagem, intensidadeDesfoque, areaEfeito):
    altura, largura, _ = imagem.shape
    borda = areaEfeito // 2

    x, y = np.mgrid[-borda:borda+1, -borda:borda+1]
    g = np.exp(-(x**2 + y**2) / (2 * intensidadeDesfoque**2))
    g = g / g.sum()

    imagemComPadding = np.pad(imagem, ((borda, borda), (borda, borda), (0, 0)), mode='edge')

    imagemDesfocada = np.zeros_like(imagem)

    for canal in range(4):
        for i in range(altura):
            for j in range(largura):
                # Multiplica a janela da imagem pelo kernel e soma os resultados
                imagemDesfocada[i, j, canal] = np.sum(imagemComPadding[i:i+areaEfeito, j:j+areaEfeito, canal] * g)

    return imagemDesfocada.astype(np.uint8)

'''
Função para exibir o histograma da imagem
'''
def exibirHistograma(imagem):
    canalCor = imagem[:, :, 0]

    histograma = np.zeros(256)
    for i in range(256):
        histograma[i] = np.sum(canalCor == i)

    plt.figure(figsize=(6, 4))
    plt.bar(range(256), histograma, color='gray')
    plt.title('Histograma da Imagem')
    plt.show()

'''
Função para exibir o modificar o brilho da imagem
'''
def modificarBrilho(imagem, intensidade):
    imagem = imagem.astype(int)

    for canal in range(imagem.shape[2]):
        imagem[:,:,canal] += intensidade

    imagem = np.clip(imagem, 0, 255)

    return imagem.astype('uint8')

'''
Função para modificar o contraste da imagem
'''
def modificarContraste(imagem, intensidade):
    media = np.mean(imagem)

    imagem = (imagem - media) * intensidade + media

    imagem = np.clip(imagem, 0, 255)

    return imagem.astype('uint8')

'''
Função para modificar a exposição da imagem
'''
def modificarExposicao(imagem, fator):
    imagem = imagem.astype(float)
    imagem *= fator

    imagem = np.clip(imagem, 0, 255)

    return imagem.astype('uint8')

'''
Função para modificar o nível de preto e branco da imagem
'''
def ajustarNivelPreto(imagem, intensidade):
    imagem = imagem.astype(float)

    imagem = np.clip((imagem / 255) ** intensidade, 0, 1) * 255

    return imagem.astype('uint8')


def ajustarNivelBranco(imagem, intensidade):
    imagem = imagem.astype(float)

    imagem = 255 * (imagem / 255) ** (1 / intensidade)
    imagem = np.clip(imagem, 0, 255)

    return imagem.astype('uint8')

'''
Função para modificar as sombras e as altas luzes da imagem
'''
def ajustarSombras(imagem, intensidade):
    imagem = imagem.astype(float)

    imagem = 255 * (imagem / 255) ** intensidade
    imagem = np.clip(imagem, 0, 255)

    return imagem.astype('uint8')


def ajustarLuzes(imagem, intensidade):
    imagem = imagem.astype(float)

    imagem = 255 * (1 - (1 - imagem / 255) ** intensidade)
    imagem = np.clip(imagem, 0, 255)

    return imagem.astype('uint8')

'''
Função para modificar as curvas da imagem
'''
def ajustarCurvas(imagem, curva):
    tabela = np.array([((i / 255.0) ** curva) * 255 for i in np.arange(0, 256)]).astype("uint8")

    imagem_ajustada = np.zeros_like(imagem)
    for i in range(imagem.shape[0]):
        for j in range(imagem.shape[1]):
            for k in range(imagem.shape[2]):
                imagem_ajustada[i, j, k] = tabela[imagem[i, j, k]]

    return imagem_ajustada

'''
Função para suavizar a imagem
'''
def suavizacaoFiltroBilateral(imagem, janelaDeInfluencia, intensidadeSuavizacao, distanciaSuavizacao):
    imagemSuavizada = np.zeros(imagem.shape)
    raio = janelaDeInfluencia // 2

    for canal in range(imagem.shape[2]):
        for i in range(raio, imagem.shape[0]-raio):
            for j in range(raio, imagem.shape[1]-raio):
                janela = imagem[i-raio:i+raio+1, j-raio:j+raio+1, canal]

                diffIntensidade = np.exp(-((janela - imagem[i, j, canal]) ** 2) / (2 * intensidadeSuavizacao ** 2))

                x, y = np.mgrid[-raio:raio+1, -raio:raio+1]
                distEspacial = np.exp(-(x**2 + y**2) / (2 * distanciaSuavizacao ** 2))

                pesos = diffIntensidade * distEspacial

                imagemSuavizada[i, j, canal] = np.sum(pesos * janela) / np.sum(pesos)

    return imagemSuavizada.astype('uint8')

"""## **INTERFACE GRÁFICA**

### **Botões - Manipular Arquivos**
"""

'''
Upload ------------------------------
'''
botao_upload = widgets.Button(
    description='Fazer Upload de Imagem',
    button_style='',  # 'success', 'info', 'warning', 'danger' ou ''
    icon='file-arrow-up',  # Ícone do Font Awesome
    layout=widgets.Layout(width='250px', height='auto')
)

# Personalize a cor de fundo do botão para branco e o contorno para cinza
botao_upload.style.button_color = 'white'
botao_upload.style.font_weight = 'bold'
botao_upload.layout.border = '1px solid #cccccc'

# Defina a ação do botão
def on_buttonUpload_clicked(b):
    uploadImagem()

botao_upload.on_click(on_buttonUpload_clicked)

'''
Deletar ------------------------------
'''
botao_delete = widgets.Button(
    description='Deletar Imagens',
    button_style='',  # 'success', 'info', 'warning', 'danger' ou ''
    icon='trash',  # Ícone do Font Awesome
    layout=widgets.Layout(width='250px', height='auto')
)

# Personalize a cor de fundo do botão para branco e o contorno para cinza
botao_delete.style.button_color = 'white'
botao_delete.style.font_weight = 'bold'
botao_delete.layout.border = '1px solid #cccccc'

# Defina a ação do botão
def on_buttonDelete_clicked(b):
    deletarArquivos()

botao_delete.on_click(on_buttonDelete_clicked)

'''
Exibir Galeria ------------------------------
'''
botao_galeria = widgets.Button(
    description='Exibir Galeria',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='images',  # Ícone do Font Awesome
    layout=widgets.Layout(width='250px', height='auto')
)

# Defina a ação do botão
def on_galeria_clicked(b):
    clear_output(wait=False)
    exibir_botoes()
    exibirGaleria()

botao_galeria.on_click(on_galeria_clicked)

botao_galeria.style.button_color = 'white'
botao_galeria.style.font_weight = 'bold'
botao_galeria.layout.border = '1px solid #cccccc'

'''
Limpar output ------------------------------
'''
# Crie um botão para limpar o output
botao_limpar_output = widgets.Button(
    description='Limpar a Área de Trabalho',
    button_style='warning',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='eraser',  # Ícone do Font Awesome
    layout=widgets.Layout(width='250px', height='auto')
)

botao_limpar_output.style.font_weight = 'bold'
botao_limpar_output.layout.border = '1px solid #cccccc'

# Defina a ação do botão
def on_buttonClear_clicked(b):
    clear_output(wait=False)
    exibir_botoes()

botao_limpar_output.on_click(on_buttonClear_clicked)

'''
Selecionar Imagem ------------------------------
'''
imagemOriginal = None
nome_imagem_widget = widgets.Text(
    value='',
    placeholder='Digite o nome da imagem que você quer manipular',
    disabled=False
)

# Criação do botão para definir a imagem
botao_definir_imagem = widgets.Button(
    description='Definir Imagem',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='image',  # Ícone do Font Awesome
    layout=widgets.Layout(width='250px', height='auto')
)

# Estilização do botão
botao_definir_imagem.style.button_color = 'white'
botao_definir_imagem.style.font_weight = 'bold'
botao_definir_imagem.layout.border = '1px solid #cccccc'

# Função chamada quando o botão é clicado
def on_buttonDefinirImagem_clicked(b):
    global imagemOriginal
    nome_imagem = nome_imagem_widget.value
    try:
        imagemOriginal = cv2.imread(nome_imagem, cv2.IMREAD_UNCHANGED)
        clear_output(wait=False)
        exibir_botoes()
        cv2_imshow(imagemOriginal)
        print("A Imagem acima foi definida para edição com sucesso!")
    except FileNotFoundError:
        clear_output(wait=False)
        exibir_botoes()
        print("Arquivo não encontrado. Por favor, verifique o nome da imagem.")

botao_definir_imagem.on_click(on_buttonDefinirImagem_clicked)

"""### **Botões - Manipular Canvas**"""

'''
Criar Canvas
'''
largura_widget = widgets.Text(
    value='',
    placeholder='Digite a largura',
    description='Largura:',
    disabled=False
)

altura_widget = widgets.Text(
    value='',
    placeholder='Digite a altura',
    description='Altura:',
    disabled=False
)

botao_criar_canvas = widgets.Button(
    description='Criar Canvas',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='pencil-alt',  # Ícone do Font Awesome
    layout=widgets.Layout(width='300px', height='auto')
)

botao_criar_canvas.style.button_color = '#f3f3f3'
botao_criar_canvas.style.font_weight = 'bold'
botao_criar_canvas.layout.border = '1px solid #cccccc'

# Função chamada quando o botão é clicado
def on_buttonCanvas_clicked(b):
    try:
        largura = int(largura_widget.value)
        altura = int(altura_widget.value)
        global canvasUsuario
        canvasUsuario = criarCanvas(largura, altura)
        clear_output(wait=False)
        exibir_botoes()
        print("Canvas criado com sucesso!")
    except ValueError:
        clear_output(wait=False)
        exibir_botoes()
        print("Por favor, insira valores inteiros para largura e altura.")

botao_criar_canvas.on_click(on_buttonCanvas_clicked)

'''
Exibir Imagem no Canvas do usuário
'''
botao_imagem_canvas = widgets.Button(
    description='Mostrar Imagem no Canvas',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='eye',  # Ícone do Font Awesome
    layout=widgets.Layout(width='300px', height='auto')
)

# Estilização do botão
botao_imagem_canvas.style.button_color = '#f3f3f3'
botao_imagem_canvas.style.font_weight = 'bold'
botao_imagem_canvas.layout.border = '1px solid #cccccc'

# Função chamada quando o botão é clicado
def on_buttonCortarImagem_clicked(b):
    imagemCortada = cortarParaCanvasUsuario(imagemOriginal, canvasUsuario)
    clear_output(wait=False)
    exibir_botoes()
    cv2_imshow(imagemCortada)

# Vinculação do evento de clique do botão à função
botao_imagem_canvas.on_click(on_buttonCortarImagem_clicked)

"""### **Botões - Manipular Imagem**"""

'''
Rotacionar a Imagem
'''
def atualizar_imagem_rotacao(angulo):
    global imagemOriginal
    imagemRotacionada = rotacionarImagem(imagemOriginal, angulo)
    imagemOriginal = imagemRotacionada
    cv2_imshow(imagemRotacionada)

# Criação do controle deslizante para o ângulo de rotação
slider_angulo = widgets.IntSlider(
    value=0,
    min=-360,
    max=360,
    step=1,
    description='Ângulo:',
    continuous_update=False
)

botao_aplicar_rotacao = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarRotacao_clicked(b):
    angulo = slider_angulo.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_rotacao(angulo)
    print(f"Ângulo de rotação aplicado: {angulo} graus")

botao_aplicar_rotacao.on_click(on_buttonAplicarRotacao_clicked)

botao_rotacionar_imagem = widgets.Button(
    description='Rotacionar',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='sync'  # Ícone do Font Awesome
)

botao_rotacionar_imagem.style.button_color = '#f3fffd'
botao_rotacionar_imagem.style.font_weight = 'bold'
botao_rotacionar_imagem.layout.border = '1px solid #cccccc'

def on_buttonRotacionarImagem_clicked(b):
    display(slider_angulo)
    display(botao_aplicar_rotacao)

# Vinculação do evento de clique do botão à função
botao_rotacionar_imagem.on_click(on_buttonRotacionarImagem_clicked)

'''
Redimensionar a Imagem
'''
def atualizar_imagem_tamanho(proporcao):
    global imagemOriginal
    imagemRedimensionada = redimensionarImagem(imagemOriginal, proporcao)
    imagemOriginal = imagemRedimensionada
    cv2_imshow(imagemRedimensionada)

# Criação do controle deslizante para o ângulo de rotação
slider_tamanho = widgets.FloatSlider(
    value=0,
    min=0.1,
    max=5,
    step=0.1,
    description='Proporção:',
    continuous_update=False
)

botao_aplicar_dimensao = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarDimensao_clicked(b):
    tamanho = slider_tamanho.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_tamanho(tamanho)
    print(f"Proporção aplicada: {tamanho}x")

botao_aplicar_dimensao.on_click(on_buttonAplicarDimensao_clicked)

botao_redimensionar_imagem = widgets.Button(
    description='Redimensionar',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='down-left-and-up-right-to-center'  # Ícone do Font Awesome
)

botao_redimensionar_imagem.style.button_color = '#f3fffd'
botao_redimensionar_imagem.style.font_weight = 'bold'
botao_redimensionar_imagem.layout.border = '1px solid #cccccc'

def on_buttonRedimensionarImagem_clicked(b):
    display(slider_tamanho)
    display(botao_aplicar_dimensao)

# Vinculação do evento de clique do botão à função
botao_redimensionar_imagem.on_click(on_buttonRedimensionarImagem_clicked)

'''
Mover a Imagem
'''
# Função para atualizar a imagem transladada
def atualizar_imagem_translacao(dx, dy):
    global imagemOriginal
    imagemTransladada = translacaoImagem(imagemOriginal, dx, dy)
    imagemOriginal = imagemTransladada
    cv2_imshow(imagemTransladada)

# Criação dos sliders para dx e dy
slider_dx = widgets.IntSlider(
    value=0,
    min=-1000,
    max=1000,
    step=1,
    description='Distância X:'
)

slider_dy = widgets.IntSlider(
    value=0,
    min=-1000,
    max=1000,
    step=1,
    description='Distância Y:'
)

botao_aplicar_movimento = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarMovimento_clicked(b):
    distX = slider_dx.value
    distY = slider_dy.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_translacao(distX, distY)

botao_aplicar_movimento.on_click(on_buttonAplicarMovimento_clicked)

botao_movimentar_imagem = widgets.Button(
    description='Mover',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='up-down-left-right'  # Ícone do Font Awesome
)

botao_movimentar_imagem.style.button_color = '#f3fffd'
botao_movimentar_imagem.style.font_weight = 'bold'
botao_movimentar_imagem.layout.border = '1px solid #cccccc'

def on_buttonMoverImagem_clicked(b):
    display(slider_dx)
    display(slider_dy)
    display(botao_aplicar_movimento)

# Vinculação do evento de clique do botão à função
botao_movimentar_imagem.on_click(on_buttonMoverImagem_clicked)

'''
Cortar imagem
'''
def atualizar_imagem_corte(final_dx, final_dy):
    global imagemOriginal
    imagemCortada = cortarImagem(imagemOriginal, 0, 0, final_dx, final_dy)
    imagemOriginal = imagemCortada
    cv2_imshow(imagemCortada)

slider_dx_final = widgets.IntSlider(
    value= 0,
    min= 0,
    max= imagemOriginal.shape[1],
    step=1,
    description='Corte X:'
)

slider_dy_final = widgets.IntSlider(
    value=0,
    min=0,
    max= imagemOriginal.shape[0],
    step=1,
    description='Corte Y:'
)

botao_aplicar_corte = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarCorte_clicked(b):
    fimX = slider_dx_final.value
    fimY = slider_dy_final.value

    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_corte(fimX, fimY)

botao_aplicar_corte.on_click(on_buttonAplicarCorte_clicked)

botao_cortar_imagem = widgets.Button(
    description='Cortar',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='crop-simple'  # Ícone do Font Awesome
)

botao_cortar_imagem.style.button_color = '#f3fffd'
botao_cortar_imagem.style.font_weight = 'bold'
botao_cortar_imagem.layout.border = '1px solid #cccccc'

def on_buttonCortarImagem_clicked(b):
    display(slider_dx_final)
    display(slider_dy_final)
    display(botao_aplicar_corte)

# Vinculação do evento de clique do botão à função
botao_cortar_imagem.on_click(on_buttonCortarImagem_clicked)

'''
Desfocar a imagem
'''
def atualizar_imagem_desfoque(intensidadeDesfoque, areaEfeito):
    global imagemOriginal
    imagemDesfocada = desfoqueGaussiano(imagemOriginal, intensidadeDesfoque, areaEfeito)
    imagemOriginal = imagemDesfocada
    cv2_imshow(imagemDesfocada)

slider_intensidade = widgets.IntSlider(
    value=0,
    min=1,
    max=250,
    step=1,
    description='Intensidade:'
)

slider_efeito = widgets.IntSlider(
    value=0,
    min=1,
    max=21,
    step=2,
    description='Area de Efeito:'
)

botao_aplicar_desfoque = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarDesfoque_clicked(b):
    intensidade = slider_intensidade.value
    area = slider_efeito.value

    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_desfoque(intensidade, area)

botao_aplicar_desfoque.on_click(on_buttonAplicarDesfoque_clicked)

botao_desfocar_imagem = widgets.Button(
    description='Desfocar',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='droplet'  # Ícone do Font Awesome
)

botao_desfocar_imagem.style.button_color = '#f3fffd'
botao_desfocar_imagem.style.font_weight = 'bold'
botao_desfocar_imagem.layout.border = '1px solid #cccccc'

def on_buttonDesfocarImagem_clicked(b):
    display(slider_intensidade)
    display(slider_efeito)
    display(botao_aplicar_desfoque)

# Vinculação do evento de clique do botão à função
botao_desfocar_imagem.on_click(on_buttonDesfocarImagem_clicked)

'''
Exibir histograma
'''
botao_histograma_imagem = widgets.Button(
    description='Histograma',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='chart-area'  # Ícone do Font Awesome
)

botao_histograma_imagem.style.button_color = '#f3fffd'
botao_histograma_imagem.style.font_weight = 'bold'
botao_histograma_imagem.layout.border = '1px solid #cccccc'

def on_buttonHistogramaImagem_clicked(b):
    global imagemOriginal
    clear_output(wait=True)
    exibir_botoes()
    cv2_imshow(imagemOriginal)
    exibirHistograma(imagemOriginal)

# Vinculação do evento de clique do botão à função
botao_histograma_imagem.on_click(on_buttonHistogramaImagem_clicked)

'''
Modificar Brilho
'''
def atualizar_imagem_brilho(intensidade):
    global imagemOriginal
    imagemBrilho = modificarBrilho(imagemOriginal, intensidade)
    imagemOriginal = imagemBrilho
    cv2_imshow(imagemBrilho)

# Criação do controle deslizante para o ângulo de rotação
slider_intensidade = widgets.IntSlider(
    value=0,
    min=-127,
    max=127,
    step=1,
    description='Intensidade:',
    continuous_update=False
)

botao_aplicar_brilho = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarBrilho_clicked(b):
    intensidade = slider_intensidade.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_brilho(intensidade)

botao_aplicar_brilho.on_click(on_buttonAplicarBrilho_clicked)

botao_brilho_imagem = widgets.Button(
    description='Brilho',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='sun'  # Ícone do Font Awesome
)

botao_brilho_imagem.style.button_color = '#f3fffd'
botao_brilho_imagem.style.font_weight = 'bold'
botao_brilho_imagem.layout.border = '1px solid #cccccc'

def on_buttonBrilhoImagem_clicked(b):
    display(slider_intensidade)
    display(botao_aplicar_brilho)

# Vinculação do evento de clique do botão à função
botao_brilho_imagem.on_click(on_buttonBrilhoImagem_clicked)

'''
Modificar Contraste
'''
def atualizar_imagem_constrate(intensidade):
    global imagemOriginal
    imagemContrastada = modificarContraste(imagemOriginal, intensidade)
    imagemOriginal = imagemContrastada
    cv2_imshow(imagemContrastada)

# Criação do controle deslizante para o ângulo de rotação
slider_intensidadeContraste = widgets.FloatSlider(
    value=0,
    min=-10,
    max=10,
    step=0.1,
    description='Intensidade:',
    continuous_update=False
)

botao_aplicar_constrate = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarContraste_clicked(b):
    intensidade = slider_intensidadeContraste.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_constrate(intensidade)

botao_aplicar_constrate.on_click(on_buttonAplicarContraste_clicked)

botao_contraste_imagem = widgets.Button(
    description='Contraste',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='circle-half-stroke'  # Ícone do Font Awesome
)

botao_contraste_imagem.style.button_color = '#f3fffd'
botao_contraste_imagem.style.font_weight = 'bold'
botao_contraste_imagem.layout.border = '1px solid #cccccc'

def on_buttonContrasteImagem_clicked(b):
    display(slider_intensidadeContraste)
    display(botao_aplicar_constrate)

# Vinculação do evento de clique do botão à função
botao_contraste_imagem.on_click(on_buttonContrasteImagem_clicked)

'''
Modificar Exposição
'''
def atualizar_imagem_exposicao(intensidade):
    global imagemOriginal
    imagemExposta = modificarExposicao(imagemOriginal, intensidade)
    imagemOriginal = imagemExposta
    cv2_imshow(imagemExposta)

# Criação do controle deslizante para o ângulo de rotação
slider_intensidadeExposicao = widgets.FloatSlider(
    value=0,
    min=-10,
    max=10,
    step=0.1,
    description='Intensidade:',
    continuous_update=False
)

botao_aplicar_exposicao = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarExposicao_clicked(b):
    intensidade = slider_intensidadeExposicao.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_exposicao(intensidade)

botao_aplicar_exposicao.on_click(on_buttonAplicarExposicao_clicked)

botao_exposicao_imagem = widgets.Button(
    description='Exposicao',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='wave-square'  # Ícone do Font Awesome
)

botao_exposicao_imagem.style.button_color = '#f3fffd'
botao_exposicao_imagem.style.font_weight = 'bold'
botao_exposicao_imagem.layout.border = '1px solid #cccccc'

def on_buttonExposicaoImagem_clicked(b):
    display(slider_intensidadeExposicao)
    display(botao_aplicar_exposicao)

# Vinculação do evento de clique do botão à função
botao_exposicao_imagem.on_click(on_buttonExposicaoImagem_clicked)

'''
Modificar Nivel de Preto
'''
def atualizar_imagem_nivelPreto(intensidade):
    global imagemOriginal
    imagemNivelPreto = ajustarNivelPreto(imagemOriginal, intensidade)
    imagemOriginal = imagemNivelPreto
    cv2_imshow(imagemNivelPreto)

# Criação do controle deslizante para o ângulo de rotação
slider_intensidadeNivelPreto = widgets.IntSlider(
    value=0,
    min=-127,
    max=127,
    step=1,
    description='Intensidade:',
    continuous_update=False
)

botao_aplicar_nivelPreto = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarNivelPreto_clicked(b):
    intensidade = slider_intensidadeNivelPreto.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_nivelPreto(intensidade)

botao_aplicar_nivelPreto.on_click(on_buttonAplicarNivelPreto_clicked)

botao_nivelPreto_imagem = widgets.Button(
    description='Nivel de Preto',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='sliders'  # Ícone do Font Awesome
)

botao_nivelPreto_imagem.style.button_color = '#f3fffd'
botao_nivelPreto_imagem.style.font_weight = 'bold'
botao_nivelPreto_imagem.layout.border = '1px solid #cccccc'

def on_buttonNivelPretoImagem_clicked(b):
    display(slider_intensidadeNivelPreto)
    display(botao_aplicar_nivelPreto)

# Vinculação do evento de clique do botão à função
botao_nivelPreto_imagem.on_click(on_buttonNivelPretoImagem_clicked)

'''
Modificar Nivel de Branco
'''
def atualizar_imagem_nivelBranco(intensidade):
    global imagemOriginal
    imagemNivelBranco = ajustarNivelBranco(imagemOriginal, intensidade)
    imagemOriginal = imagemNivelBranco
    cv2_imshow(imagemNivelBranco)

# Criação do controle deslizante para o ângulo de rotação
slider_intensidadeNivelBranco = widgets.IntSlider(
    value=0,
    min=-127,
    max=127,
    step=1,
    description='Intensidade:',
    continuous_update=False
)

botao_aplicar_nivelBranco = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarNivelBranco_clicked(b):
    intensidade = slider_intensidadeNivelBranco.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_nivelBranco(intensidade)

botao_aplicar_nivelBranco.on_click(on_buttonAplicarNivelBranco_clicked)

botao_nivelBranco_imagem = widgets.Button(
    description='Nivel de Branco',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='sliders'  # Ícone do Font Awesome
)

botao_nivelBranco_imagem.style.button_color = '#f3fffd'
botao_nivelBranco_imagem.style.font_weight = 'bold'
botao_nivelBranco_imagem.layout.border = '1px solid #cccccc'

def on_buttonNivelBrancoImagem_clicked(b):
    display(slider_intensidadeNivelBranco)
    display(botao_aplicar_nivelBranco)

# Vinculação do evento de clique do botão à função
botao_nivelBranco_imagem.on_click(on_buttonNivelBrancoImagem_clicked)

'''
Modificar Sombras
'''
def atualizar_imagem_sombras(intensidade):
    global imagemOriginal
    imagemSombras = ajustarSombras(imagemOriginal, intensidade)
    imagemOriginal = imagemSombras
    cv2_imshow(imagemSombras)

# Criação do controle deslizante para o ângulo de rotação
slider_intensidadeSombras = widgets.IntSlider(
    value=0,
    min=-127,
    max=127,
    step=1,
    description='Intensidade:',
    continuous_update=False
)

botao_aplicar_sombras = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarSombra_clicked(b):
    intensidade = slider_intensidadeSombras.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_sombras(intensidade)

botao_aplicar_sombras.on_click(on_buttonAplicarSombra_clicked)

botao_sombra_imagem = widgets.Button(
    description='Sombras',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='cloud-moon'  # Ícone do Font Awesome
)

botao_sombra_imagem.style.button_color = '#f3fffd'
botao_sombra_imagem.style.font_weight = 'bold'
botao_sombra_imagem.layout.border = '1px solid #cccccc'

def on_buttonSombraImagem_clicked(b):
    display(slider_intensidadeSombras)
    display(botao_aplicar_sombras)

# Vinculação do evento de clique do botão à função
botao_sombra_imagem.on_click(on_buttonSombraImagem_clicked)

'''
Modificar Luzes
'''
def atualizar_imagem_luzes(intensidade):
    global imagemOriginal
    imagemLuzes = ajustarLuzes(imagemOriginal, intensidade)
    imagemOriginal = imagemLuzes
    cv2_imshow(imagemLuzes)

# Criação do controle deslizante para o ângulo de rotação
slider_intensidadeLuzes = widgets.IntSlider(
    value=0,
    min=-127,
    max=127,
    step=1,
    description='Intensidade:',
    continuous_update=False
)

botao_aplicar_luzes = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarLuzes_clicked(b):
    intensidade = slider_intensidadeLuzes.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_luzes(intensidade)

botao_aplicar_luzes.on_click(on_buttonAplicarLuzes_clicked)

botao_luzes_imagem = widgets.Button(
    description='Luzes',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='cloud-sun'  # Ícone do Font Awesome
)

botao_luzes_imagem.style.button_color = '#f3fffd'
botao_luzes_imagem.style.font_weight = 'bold'
botao_luzes_imagem.layout.border = '1px solid #cccccc'

def on_buttonLuzesImagem_clicked(b):
    display(slider_intensidadeLuzes)
    display(botao_aplicar_luzes)

# Vinculação do evento de clique do botão à função
botao_luzes_imagem.on_click(on_buttonLuzesImagem_clicked)

'''
Ajustar Curvas
'''
def atualizar_imagem_curvas(intensidade):
    global imagemOriginal
    imagemCurvas = ajustarCurvas(imagemOriginal, intensidade)
    imagemOriginal = imagemCurvas
    cv2_imshow(imagemCurvas)

# Criação do controle deslizante para o ângulo de rotação
slider_intensidadeCurvas = widgets.IntSlider(
    value=0,
    min=-255,
    max=255,
    step=1,
    description='Intensidade:',
    continuous_update=False
)

botao_aplicar_curvas = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarCurvas_clicked(b):
    intensidade = slider_intensidadeCurvas.value
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_curvas(intensidade)

botao_aplicar_curvas.on_click(on_buttonAplicarCurvas_clicked)

botao_curvas_imagem = widgets.Button(
    description='Curvas',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='bezier-curve'  # Ícone do Font Awesome
)

botao_curvas_imagem.style.button_color = '#f3fffd'
botao_curvas_imagem.style.font_weight = 'bold'
botao_curvas_imagem.layout.border = '1px solid #cccccc'

def on_buttonCurvasImagem_clicked(b):
    display(slider_intensidadeCurvas)
    display(botao_aplicar_curvas)

# Vinculação do evento de clique do botão à função
botao_curvas_imagem.on_click(on_buttonCurvasImagem_clicked)

'''
Realçar Imagem
'''
def atualizar_imagem_realcar():
    global imagemOriginal
    imagemRealce = realce(imagemOriginal)
    imagemOriginal = imagemRealce
    cv2_imshow(imagemRealce)


botao_realce_suavizacao = widgets.Button(
    description='Aplicar',
    button_style='success',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='check'  # Ícone do Font Awesome
)

def on_buttonAplicarSuavizacao_clicked(b):
    clear_output(wait=True)
    exibir_botoes()
    atualizar_imagem_realcar()

botao_realce_suavizacao.on_click(on_buttonAplicarSuavizacao_clicked)

botao_realce_imagem = widgets.Button(
    description='Realçar Imagem',
    button_style='',  # Estilos: 'success', 'info', 'warning', 'danger' ou ''
    icon='mountain-sun'  # Ícone do Font Awesome
)

botao_realce_imagem.style.button_color = '#f3fffd'
botao_realce_imagem.style.font_weight = 'bold'
botao_realce_imagem.layout.border = '1px solid #cccccc'

def on_buttonRealceImagem_clicked(b):
    display(botao_realce_suavizacao)

# Vinculação do evento de clique do botão à função
botao_realce_imagem.on_click(on_buttonRealceImagem_clicked)

"""## **RODAR A INTERFACE**"""

'''
EXIBIR BOTÕES
'''

def exibir_botoes():
    exibir_botoes_arquivos()
    print("\n")
    exibir_botoes_canvas()
    print("\n \n")
    exibir_botoes_imagens()

def exibir_botoes_arquivos():
    display(HTML('''<script src="https://kit.fontawesome.com/7aeea6593f.js" crossorigin="anonymous"></script>'''))
    display(botao_upload)
    display(botao_delete)
    display(botao_galeria)
    display(nome_imagem_widget, botao_definir_imagem)
    display(botao_limpar_output)


def exibir_botoes_canvas():
    display(HTML('''<script src="https://kit.fontawesome.com/7aeea6593f.js" crossorigin="anonymous"></script>'''))
    print("Crie seu canvas para edição de Imagem:")
    display(largura_widget, altura_widget, botao_criar_canvas)
    display(botao_imagem_canvas)

def exibir_botoes_imagens():
    display(HTML('''<script src="https://kit.fontawesome.com/7aeea6593f.js" crossorigin="anonymous"></script>'''))
    print("Preparado para modificar a sua imagem? Selecione suas operações abaixo")
    display(botao_rotacionar_imagem)
    display(botao_redimensionar_imagem)
    display(botao_movimentar_imagem)
    display(botao_cortar_imagem)
    display(botao_desfocar_imagem)
    display(botao_histograma_imagem)
    display(botao_brilho_imagem)
    display(botao_contraste_imagem)
    display(botao_exposicao_imagem)
    display(botao_nivelPreto_imagem)
    display(botao_nivelBranco_imagem)
    display(botao_sombra_imagem)
    display(botao_luzes_imagem)
    display(botao_curvas_imagem)

# Chame a função para exibir os botões
exibir_botoes()